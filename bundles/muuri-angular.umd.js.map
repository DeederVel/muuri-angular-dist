{"version":3,"file":"muuri-angular.umd.js","sources":["../../../projects/muuri-angular/src/lib/muuri-grid.directive.ts","../../../projects/muuri-angular/src/lib/muuri-grid-item.directive.ts","../../../projects/muuri-angular/src/lib/muuri-angular.module.ts","../../../projects/muuri-angular/src/public-api.ts","../../../projects/muuri-angular/src/muuri-angular.ts"],"sourcesContent":["import { Directive, ElementRef, OnDestroy, OnInit, Input, Output, EventEmitter, SimpleChanges, OnChanges } from '@angular/core';\r\nimport Grid, { GridOptions, Item } from 'muuri';\r\n\r\n@Directive({\r\n    selector: '[muuriGrid]'\r\n})\r\nexport class MuuriGridDirective implements OnInit, OnDestroy, OnChanges {\r\n    @Input() config: GridOptions;\r\n    @Output() gridCreated: EventEmitter<Grid> = new EventEmitter();\r\n    gridObject?: Grid;\r\n\r\n    constructor(private elRef: ElementRef) {}\r\n\r\n    ngOnInit(): void {\r\n        this.init(this.elRef);\r\n    }\r\n\r\n    /**\r\n     * Rebuild the grid when the Muuri config changes.\r\n     * @param changes Changes object.\r\n     */\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        if (this.gridObject) {\r\n            this.destroyLayout();\r\n            this.init(this.elRef);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Initialize the grid.\r\n     */\r\n    init(grid: ElementRef): void {\r\n        this.gridObject = new Grid(grid.nativeElement, this.config);\r\n        this.gridCreated.emit(this.gridObject);\r\n    }\r\n\r\n    /**\r\n     * Add a new item to the grid.\r\n     */\r\n    addItem(item: ElementRef): Item[] {\r\n        return this.gridObject.add(item.nativeElement);\r\n    }\r\n\r\n    destroyLayout(): void {\r\n        this.gridObject.destroy();\r\n        this.gridObject = null;\r\n    }\r\n\r\n    refresh(): void {\r\n        this.gridObject.refreshItems();\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.destroyLayout();\r\n    }\r\n\r\n    /**\r\n     * Remove an item from the grid.\r\n     */\r\n    removeItem(item: ElementRef): void {\r\n        const gridItem = this.gridObject.getItem(item.nativeElement);\r\n        if(gridItem === null \r\n        || item === null\r\n        || item === undefined\r\n        || gridItem === undefined) {\r\n          //Double remotion might be happening, silence it\r\n        } else {\r\n          this.gridObject.remove([gridItem], {\r\n              removeElements: true,\r\n              layout: true\r\n          });\r\n        }\r\n    }\r\n}\r\n","import { Directive, ElementRef, EventEmitter, Host, OnDestroy, OnInit, Output } from '@angular/core';\r\nimport { Item } from 'muuri';\r\nimport { MuuriGridDirective } from './muuri-grid.directive';\r\n\r\n@Directive({\r\n    selector: '[muuriGridItem]'\r\n})\r\nexport class MuuriGridItemDirective implements OnInit, OnDestroy {\r\n    @Output() itemCreated: EventEmitter<Item> = new EventEmitter();\r\n\r\n    constructor(@Host() private tileGrid: MuuriGridDirective, private elRef: ElementRef) {}\r\n\r\n    ngOnInit(): void {\r\n        // As Angular creates one item at a time, we'll get an array back with just one item.\r\n        this.itemCreated.emit(this.tileGrid.addItem(this.elRef)[0]);\r\n\r\n        // Force refresh the grid to prevent overlapping items\r\n        this.tileGrid.refresh();\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.tileGrid.removeItem(this.elRef);\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { MuuriGridDirective } from './muuri-grid.directive';\r\nimport { MuuriGridItemDirective } from './muuri-grid-item.directive';\r\n\r\n@NgModule({\r\n  declarations: [MuuriGridDirective, MuuriGridItemDirective],\r\n  imports: [],\r\n  exports: [MuuriGridDirective, MuuriGridItemDirective]\r\n})\r\nexport class MuuriModule { }\r\n","/*\r\n * Public API Surface of muuri-angular\r\n */\r\n\r\nexport * from './lib/muuri-grid.directive';\r\nexport * from './lib/muuri-grid-item.directive';\r\nexport * from './lib/muuri-angular.module';\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["EventEmitter","Grid","Directive","Input","Output","Host","NgModule"],"mappings":"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"}