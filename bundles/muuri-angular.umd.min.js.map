{"version":3,"sources":["../../../projects/muuri-angular/src/lib/muuri-grid.directive.ts","../../../projects/muuri-angular/src/lib/muuri-grid-item.directive.ts","../../../projects/muuri-angular/src/lib/muuri-angular.module.ts"],"names":["MuuriGridDirective","elRef","this","gridCreated","EventEmitter","prototype","ngOnInit","init","ngOnChanges","changes","gridObject","destroyLayout","grid","Grid","nativeElement","config","emit","addItem","item","add","destroy","refresh","refreshItems","ngOnDestroy","removeItem","gridItem","getItem","undefined","remove","removeElements","layout","i0","ɵɵdirectiveInject","ElementRef","selectors","inputs","outputs","features","ɵɵNgOnChangesFeature","MuuriGridItemDirective","tileGrid","itemCreated","MuuriModule","imports","declarations","exports"],"mappings":"+bAWI,SAAAA,EAAoBC,GAAAC,KAAAD,MAAAA,EAHVC,KAAAC,YAAkC,IAAIC,EAAAA,oBAKhDJ,EAAAK,UAAAC,SAAA,WACIJ,KAAKK,KAAKL,KAAKD,QAOnBD,EAAAK,UAAAG,YAAA,SAAYC,GACJP,KAAKQ,aACLR,KAAKS,gBACLT,KAAKK,KAAKL,KAAKD,SAOvBD,EAAAK,UAAAE,KAAA,SAAKK,GACDV,KAAKQ,WAAa,IAAIG,EAAAA,QAAKD,EAAKE,cAAeZ,KAAKa,QACpDb,KAAKC,YAAYa,KAAKd,KAAKQ,aAM/BV,EAAAK,UAAAY,QAAA,SAAQC,GACJ,OAAOhB,KAAKQ,WAAWS,IAAID,EAAKJ,gBAGpCd,EAAAK,UAAAM,cAAA,WACIT,KAAKQ,WAAWU,UAChBlB,KAAKQ,WAAa,MAGtBV,EAAAK,UAAAgB,QAAA,WACInB,KAAKQ,WAAWY,gBAGpBtB,EAAAK,UAAAkB,YAAA,WACIrB,KAAKS,iBAMTX,EAAAK,UAAAmB,WAAA,SAAWN,GACP,IAAMO,EAAWvB,KAAKQ,WAAWgB,QAAQR,EAAKJ,eAC9B,OAAbW,GAAAA,MACAP,QAEaS,IAAbF,GAGDvB,KAAKQ,WAAWkB,OAAO,CAACH,GAAW,CAC/BI,gBAAgB,EAChBC,QAAQ,2CA/DT9B,GAAkB+B,EAAAC,kBAAAD,EAAAE,+CAAlBjC,EAAkBkC,UAAA,CAAA,CAAA,GAAA,YAAA,KAAAC,OAAA,CAAApB,OAAA,UAAAqB,QAAA,CAAAjC,YAAA,eAAAkC,SAAA,CAAAN,EAAAO,yCCI3B,SAAAC,EAA4BC,EAAsCvC,GAAtCC,KAAAsC,SAAAA,EAAsCtC,KAAAD,MAAAA,EAFxDC,KAAAuC,YAAkC,IAAIrC,EAAAA,oBAIhDmC,EAAAlC,UAAAC,SAAA,WAEIJ,KAAKuC,YAAYzB,KAAKd,KAAKsC,SAASvB,QAAQf,KAAKD,OAAO,IAGxDC,KAAKsC,SAASnB,WAGlBkB,EAAAlC,UAAAkB,YAAA,WACIrB,KAAKsC,SAAShB,WAAWtB,KAAKD,8CAdzBsC,GAAsBR,EAAAC,kBAAAhC,EAAA,GAAA+B,EAAAC,kBAAAD,EAAAE,+CAAtBM,EAAsBL,UAAA,CAAA,CAAA,GAAA,gBAAA,KAAAE,QAAA,CAAAK,YAAA,uBCEnC,6CAAaC,iEAAAA,IAAWC,QAAA,CAHb,uEAGED,EAAW,CAAAE,aAAA,CAJP5C,EAAoBuC,GAAsBM,QAAA,CAE/C7C,EAAoBuC","sourcesContent":["import { Directive, ElementRef, OnDestroy, OnInit, Input, Output, EventEmitter, SimpleChanges, OnChanges } from '@angular/core';\r\nimport Grid, { GridOptions, Item } from 'muuri';\r\n\r\n@Directive({\r\n    selector: '[muuriGrid]'\r\n})\r\nexport class MuuriGridDirective implements OnInit, OnDestroy, OnChanges {\r\n    @Input() config: GridOptions;\r\n    @Output() gridCreated: EventEmitter<Grid> = new EventEmitter();\r\n    gridObject?: Grid;\r\n\r\n    constructor(private elRef: ElementRef) {}\r\n\r\n    ngOnInit(): void {\r\n        this.init(this.elRef);\r\n    }\r\n\r\n    /**\r\n     * Rebuild the grid when the Muuri config changes.\r\n     * @param changes Changes object.\r\n     */\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        if (this.gridObject) {\r\n            this.destroyLayout();\r\n            this.init(this.elRef);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Initialize the grid.\r\n     */\r\n    init(grid: ElementRef): void {\r\n        this.gridObject = new Grid(grid.nativeElement, this.config);\r\n        this.gridCreated.emit(this.gridObject);\r\n    }\r\n\r\n    /**\r\n     * Add a new item to the grid.\r\n     */\r\n    addItem(item: ElementRef): Item[] {\r\n        return this.gridObject.add(item.nativeElement);\r\n    }\r\n\r\n    destroyLayout(): void {\r\n        this.gridObject.destroy();\r\n        this.gridObject = null;\r\n    }\r\n\r\n    refresh(): void {\r\n        this.gridObject.refreshItems();\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.destroyLayout();\r\n    }\r\n\r\n    /**\r\n     * Remove an item from the grid.\r\n     */\r\n    removeItem(item: ElementRef): void {\r\n        const gridItem = this.gridObject.getItem(item.nativeElement);\r\n        if(gridItem === null \r\n        || item === null\r\n        || item === undefined\r\n        || gridItem === undefined) {\r\n          //Double remotion might be happening, silence it\r\n        } else {\r\n          this.gridObject.remove([gridItem], {\r\n              removeElements: true,\r\n              layout: true\r\n          });\r\n        }\r\n    }\r\n}\r\n","import { Directive, ElementRef, EventEmitter, Host, OnDestroy, OnInit, Output } from '@angular/core';\r\nimport { Item } from 'muuri';\r\nimport { MuuriGridDirective } from './muuri-grid.directive';\r\n\r\n@Directive({\r\n    selector: '[muuriGridItem]'\r\n})\r\nexport class MuuriGridItemDirective implements OnInit, OnDestroy {\r\n    @Output() itemCreated: EventEmitter<Item> = new EventEmitter();\r\n\r\n    constructor(@Host() private tileGrid: MuuriGridDirective, private elRef: ElementRef) {}\r\n\r\n    ngOnInit(): void {\r\n        // As Angular creates one item at a time, we'll get an array back with just one item.\r\n        this.itemCreated.emit(this.tileGrid.addItem(this.elRef)[0]);\r\n\r\n        // Force refresh the grid to prevent overlapping items\r\n        this.tileGrid.refresh();\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.tileGrid.removeItem(this.elRef);\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { MuuriGridDirective } from './muuri-grid.directive';\r\nimport { MuuriGridItemDirective } from './muuri-grid-item.directive';\r\n\r\n@NgModule({\r\n  declarations: [MuuriGridDirective, MuuriGridItemDirective],\r\n  imports: [],\r\n  exports: [MuuriGridDirective, MuuriGridItemDirective]\r\n})\r\nexport class MuuriModule { }\r\n"]}