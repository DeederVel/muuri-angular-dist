{"version":3,"file":"muuri-angular.js","sources":["../../../projects/muuri-angular/src/lib/muuri-grid.directive.ts","../../../projects/muuri-angular/src/lib/muuri-grid-item.directive.ts","../../../projects/muuri-angular/src/lib/muuri-angular.module.ts","../../../projects/muuri-angular/src/public-api.ts","../../../projects/muuri-angular/src/muuri-angular.ts"],"sourcesContent":["import { Directive, ElementRef, OnDestroy, OnInit, Input, Output, EventEmitter, SimpleChanges, OnChanges } from '@angular/core';\r\nimport Grid, { GridOptions, Item } from 'muuri';\r\n\r\n@Directive({\r\n    selector: '[muuriGrid]'\r\n})\r\nexport class MuuriGridDirective implements OnInit, OnDestroy, OnChanges {\r\n    @Input() config: GridOptions;\r\n    @Output() gridCreated: EventEmitter<Grid> = new EventEmitter();\r\n    gridObject?: Grid;\r\n\r\n    constructor(private elRef: ElementRef) {}\r\n\r\n    ngOnInit(): void {\r\n        this.init(this.elRef);\r\n    }\r\n\r\n    /**\r\n     * Rebuild the grid when the Muuri config changes.\r\n     * @param changes Changes object.\r\n     */\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        if (this.gridObject) {\r\n            this.destroyLayout();\r\n            this.init(this.elRef);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Initialize the grid.\r\n     */\r\n    init(grid: ElementRef): void {\r\n        this.gridObject = new Grid(grid.nativeElement, this.config);\r\n        this.gridCreated.emit(this.gridObject);\r\n    }\r\n\r\n    /**\r\n     * Add a new item to the grid.\r\n     */\r\n    addItem(item: ElementRef): Item[] {\r\n        return this.gridObject.add(item.nativeElement);\r\n    }\r\n\r\n    destroyLayout(): void {\r\n        this.gridObject.destroy();\r\n        this.gridObject = null;\r\n    }\r\n\r\n    refresh(): void {\r\n        this.gridObject.refreshItems();\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.destroyLayout();\r\n    }\r\n\r\n    /**\r\n     * Remove an item from the grid.\r\n     */\r\n    removeItem(item: ElementRef): void {\r\n        const gridItem = this.gridObject.getItem(item.nativeElement);\r\n        if(gridItem === null \r\n        || item === null\r\n        || item === undefined\r\n        || gridItem === undefined) {\r\n          //Double remotion might be happening, silence it\r\n        } else {\r\n          this.gridObject.remove([gridItem], {\r\n              removeElements: true,\r\n              layout: true\r\n          });\r\n        }\r\n    }\r\n}\r\n","import { Directive, ElementRef, EventEmitter, Host, OnDestroy, OnInit, Output } from '@angular/core';\r\nimport { Item } from 'muuri';\r\nimport { MuuriGridDirective } from './muuri-grid.directive';\r\n\r\n@Directive({\r\n    selector: '[muuriGridItem]'\r\n})\r\nexport class MuuriGridItemDirective implements OnInit, OnDestroy {\r\n    @Output() itemCreated: EventEmitter<Item> = new EventEmitter();\r\n\r\n    constructor(@Host() private tileGrid: MuuriGridDirective, private elRef: ElementRef) {}\r\n\r\n    ngOnInit(): void {\r\n        // As Angular creates one item at a time, we'll get an array back with just one item.\r\n        this.itemCreated.emit(this.tileGrid.addItem(this.elRef)[0]);\r\n\r\n        // Force refresh the grid to prevent overlapping items\r\n        this.tileGrid.refresh();\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.tileGrid.removeItem(this.elRef);\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { MuuriGridDirective } from './muuri-grid.directive';\r\nimport { MuuriGridItemDirective } from './muuri-grid-item.directive';\r\n\r\n@NgModule({\r\n  declarations: [MuuriGridDirective, MuuriGridItemDirective],\r\n  imports: [],\r\n  exports: [MuuriGridDirective, MuuriGridItemDirective]\r\n})\r\nexport class MuuriModule { }\r\n","/*\r\n * Public API Surface of muuri-angular\r\n */\r\n\r\nexport * from './lib/muuri-grid.directive';\r\nexport * from './lib/muuri-grid-item.directive';\r\nexport * from './lib/muuri-angular.module';\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}